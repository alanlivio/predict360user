import unittest

from users360.utils.fov import fov_poly
from users360.utils.tileset import tile_poly


class Test(unittest.TestCase):

    def test_tileset_polys(self) -> None:
        # t_ver, t_hor = 6 , 4
        # traces = [ [1, 0, 0], [-1, 0, 0], [0, 1, 0], [0, -1, 0], [0, 0, 1], [0, 0, -1] ]
        # for trace in traces:
        #     print(f"        # trace = {repr(trace)}")
        #     for row in range(t_ver): # range(t_ver):
        #         for col in range(t_hor):
        #             tile_poly_rc = tile_poly(t_ver, t_hor, row, col)
        #             fov_poly_trace = poly(trace)
        #             print(f"        self.assertAlmostEqual(tile_poly({t_ver}, {t_hor}, {row}, {col}).area(),{format(tile_poly_rc.area(),'f')},places=6)")
        #             print(f"        self.assertAlmostEqual(fov_poly({repr(trace)}).area(),{format(fov_poly_trace.area(),'f')},places=6)")
        #             print(f"        self.assertAlmostEqual(tile_poly({t_ver}, {t_hor}, {row}, {col}).overlap(fov_poly({repr(trace)})),{format(tile_poly_rc.overlap(fov_poly_trace),'f')},places=6)")
        #             print(f"        self.assertAlmostEqual(1-tile_poly({t_ver}, {t_hor}, {row}, {col}).overlap(fov_poly({repr(trace)})),{format(1-tile_poly_rc.overlap(fov_poly_trace),'f')},places=6)")

        # trace = [1, 0, 0]
        self.assertAlmostEqual(tile_poly(6, 4, 0, 0).area(), 0.143348, places=6)
        self.assertAlmostEqual(fov_poly([1, 0, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 0, 0).overlap(fov_poly([1, 0, 0])), 0.000032, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 0, 0).overlap(fov_poly([1, 0, 0])), 0.999968, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 0, 1).area(), 0.143348, places=6)
        self.assertAlmostEqual(fov_poly([1, 0, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 0, 1).overlap(fov_poly([1, 0, 0])), 0.000000, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 0, 1).overlap(fov_poly([1, 0, 0])), 1.000000, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 0, 2).area(), 0.143348, places=6)
        self.assertAlmostEqual(fov_poly([1, 0, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 0, 2).overlap(fov_poly([1, 0, 0])), 0.000000, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 0, 2).overlap(fov_poly([1, 0, 0])), 1.000000, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 0, 3).area(), 0.143348, places=6)
        self.assertAlmostEqual(fov_poly([1, 0, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 0, 3).overlap(fov_poly([1, 0, 0])), 0.000032, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 0, 3).overlap(fov_poly([1, 0, 0])), 0.999968, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 1, 0).area(), 0.500154, places=6)
        self.assertAlmostEqual(fov_poly([1, 0, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 1, 0).overlap(fov_poly([1, 0, 0])), 0.433070, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 1, 0).overlap(fov_poly([1, 0, 0])), 0.566930, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 1, 1).area(), 0.500154, places=6)
        self.assertAlmostEqual(fov_poly([1, 0, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 1, 1).overlap(fov_poly([1, 0, 0])), 0.000000, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 1, 1).overlap(fov_poly([1, 0, 0])), 1.000000, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 1, 2).area(), 0.500154, places=6)
        self.assertAlmostEqual(fov_poly([1, 0, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 1, 2).overlap(fov_poly([1, 0, 0])), 0.000000, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 1, 2).overlap(fov_poly([1, 0, 0])), 1.000000, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 1, 3).area(), 0.500154, places=6)
        self.assertAlmostEqual(fov_poly([1, 0, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 1, 3).overlap(fov_poly([1, 0, 0])), 0.433070, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 1, 3).overlap(fov_poly([1, 0, 0])), 0.566930, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 2, 0).area(), 0.927295, places=6)
        self.assertAlmostEqual(fov_poly([1, 0, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 2, 0).overlap(fov_poly([1, 0, 0])), 0.618675, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 2, 0).overlap(fov_poly([1, 0, 0])), 0.381325, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 2, 1).area(), 0.927295, places=6)
        self.assertAlmostEqual(fov_poly([1, 0, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 2, 1).overlap(fov_poly([1, 0, 0])), 0.000000, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 2, 1).overlap(fov_poly([1, 0, 0])), 1.000000, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 2, 2).area(), 0.927295, places=6)
        self.assertAlmostEqual(fov_poly([1, 0, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 2, 2).overlap(fov_poly([1, 0, 0])), 0.000000, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 2, 2).overlap(fov_poly([1, 0, 0])), 1.000000, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 2, 3).area(), 0.927295, places=6)
        self.assertAlmostEqual(fov_poly([1, 0, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 2, 3).overlap(fov_poly([1, 0, 0])), 0.618675, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 2, 3).overlap(fov_poly([1, 0, 0])), 0.381325, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 3, 0).area(), 0.927295, places=6)
        self.assertAlmostEqual(fov_poly([1, 0, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 3, 0).overlap(fov_poly([1, 0, 0])), 0.618675, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 3, 0).overlap(fov_poly([1, 0, 0])), 0.381325, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 3, 1).area(), 0.927295, places=6)
        self.assertAlmostEqual(fov_poly([1, 0, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 3, 1).overlap(fov_poly([1, 0, 0])), 0.000000, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 3, 1).overlap(fov_poly([1, 0, 0])), 1.000000, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 3, 2).area(), 0.927295, places=6)
        self.assertAlmostEqual(fov_poly([1, 0, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 3, 2).overlap(fov_poly([1, 0, 0])), 0.000000, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 3, 2).overlap(fov_poly([1, 0, 0])), 1.000000, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 3, 3).area(), 0.927295, places=6)
        self.assertAlmostEqual(fov_poly([1, 0, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 3, 3).overlap(fov_poly([1, 0, 0])), 0.618675, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 3, 3).overlap(fov_poly([1, 0, 0])), 0.381325, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 4, 0).area(), 0.500154, places=6)
        self.assertAlmostEqual(fov_poly([1, 0, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 4, 0).overlap(fov_poly([1, 0, 0])), 0.433070, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 4, 0).overlap(fov_poly([1, 0, 0])), 0.566930, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 4, 1).area(), 0.500154, places=6)
        self.assertAlmostEqual(fov_poly([1, 0, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 4, 1).overlap(fov_poly([1, 0, 0])), 0.000000, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 4, 1).overlap(fov_poly([1, 0, 0])), 1.000000, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 4, 2).area(), 0.500154, places=6)
        self.assertAlmostEqual(fov_poly([1, 0, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 4, 2).overlap(fov_poly([1, 0, 0])), 0.000000, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 4, 2).overlap(fov_poly([1, 0, 0])), 1.000000, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 4, 3).area(), 0.500154, places=6)
        self.assertAlmostEqual(fov_poly([1, 0, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 4, 3).overlap(fov_poly([1, 0, 0])), 0.433070, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 4, 3).overlap(fov_poly([1, 0, 0])), 0.566930, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 5, 0).area(), 0.143348, places=6)
        self.assertAlmostEqual(fov_poly([1, 0, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 5, 0).overlap(fov_poly([1, 0, 0])), 0.000032, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 5, 0).overlap(fov_poly([1, 0, 0])), 0.999968, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 5, 1).area(), 0.143348, places=6)
        self.assertAlmostEqual(fov_poly([1, 0, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 5, 1).overlap(fov_poly([1, 0, 0])), 0.000000, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 5, 1).overlap(fov_poly([1, 0, 0])), 1.000000, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 5, 2).area(), 0.143348, places=6)
        self.assertAlmostEqual(fov_poly([1, 0, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 5, 2).overlap(fov_poly([1, 0, 0])), 0.000000, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 5, 2).overlap(fov_poly([1, 0, 0])), 1.000000, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 5, 3).area(), 0.143348, places=6)
        self.assertAlmostEqual(fov_poly([1, 0, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 5, 3).overlap(fov_poly([1, 0, 0])), 0.000032, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 5, 3).overlap(fov_poly([1, 0, 0])), 0.999968, places=6)
        # trace = [-1, 0, 0]
        self.assertAlmostEqual(tile_poly(6, 4, 0, 0).area(), 0.143348, places=6)
        self.assertAlmostEqual(fov_poly([-1, 0, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 0, 0).overlap(fov_poly([-1, 0, 0])), 0.000000, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 0, 0).overlap(fov_poly([-1, 0, 0])), 1.000000, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 0, 1).area(), 0.143348, places=6)
        self.assertAlmostEqual(fov_poly([-1, 0, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 0, 1).overlap(fov_poly([-1, 0, 0])), 0.000032, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 0, 1).overlap(fov_poly([-1, 0, 0])), 0.999968, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 0, 2).area(), 0.143348, places=6)
        self.assertAlmostEqual(fov_poly([-1, 0, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 0, 2).overlap(fov_poly([-1, 0, 0])), 0.000032, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 0, 2).overlap(fov_poly([-1, 0, 0])), 0.999968, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 0, 3).area(), 0.143348, places=6)
        self.assertAlmostEqual(fov_poly([-1, 0, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 0, 3).overlap(fov_poly([-1, 0, 0])), 0.000000, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 0, 3).overlap(fov_poly([-1, 0, 0])), 1.000000, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 1, 0).area(), 0.500154, places=6)
        self.assertAlmostEqual(fov_poly([-1, 0, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 1, 0).overlap(fov_poly([-1, 0, 0])), 0.000000, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 1, 0).overlap(fov_poly([-1, 0, 0])), 1.000000, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 1, 1).area(), 0.500154, places=6)
        self.assertAlmostEqual(fov_poly([-1, 0, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 1, 1).overlap(fov_poly([-1, 0, 0])), 0.433070, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 1, 1).overlap(fov_poly([-1, 0, 0])), 0.566930, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 1, 2).area(), 0.500154, places=6)
        self.assertAlmostEqual(fov_poly([-1, 0, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 1, 2).overlap(fov_poly([-1, 0, 0])), 0.433070, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 1, 2).overlap(fov_poly([-1, 0, 0])), 0.566930, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 1, 3).area(), 0.500154, places=6)
        self.assertAlmostEqual(fov_poly([-1, 0, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 1, 3).overlap(fov_poly([-1, 0, 0])), 0.000000, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 1, 3).overlap(fov_poly([-1, 0, 0])), 1.000000, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 2, 0).area(), 0.927295, places=6)
        self.assertAlmostEqual(fov_poly([-1, 0, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 2, 0).overlap(fov_poly([-1, 0, 0])), 0.000000, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 2, 0).overlap(fov_poly([-1, 0, 0])), 1.000000, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 2, 1).area(), 0.927295, places=6)
        self.assertAlmostEqual(fov_poly([-1, 0, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 2, 1).overlap(fov_poly([-1, 0, 0])), 0.618675, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 2, 1).overlap(fov_poly([-1, 0, 0])), 0.381325, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 2, 2).area(), 0.927295, places=6)
        self.assertAlmostEqual(fov_poly([-1, 0, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 2, 2).overlap(fov_poly([-1, 0, 0])), 0.618675, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 2, 2).overlap(fov_poly([-1, 0, 0])), 0.381325, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 2, 3).area(), 0.927295, places=6)
        self.assertAlmostEqual(fov_poly([-1, 0, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 2, 3).overlap(fov_poly([-1, 0, 0])), 0.000000, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 2, 3).overlap(fov_poly([-1, 0, 0])), 1.000000, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 3, 0).area(), 0.927295, places=6)
        self.assertAlmostEqual(fov_poly([-1, 0, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 3, 0).overlap(fov_poly([-1, 0, 0])), 0.000000, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 3, 0).overlap(fov_poly([-1, 0, 0])), 1.000000, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 3, 1).area(), 0.927295, places=6)
        self.assertAlmostEqual(fov_poly([-1, 0, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 3, 1).overlap(fov_poly([-1, 0, 0])), 0.618675, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 3, 1).overlap(fov_poly([-1, 0, 0])), 0.381325, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 3, 2).area(), 0.927295, places=6)
        self.assertAlmostEqual(fov_poly([-1, 0, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 3, 2).overlap(fov_poly([-1, 0, 0])), 0.618675, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 3, 2).overlap(fov_poly([-1, 0, 0])), 0.381325, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 3, 3).area(), 0.927295, places=6)
        self.assertAlmostEqual(fov_poly([-1, 0, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 3, 3).overlap(fov_poly([-1, 0, 0])), 0.000000, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 3, 3).overlap(fov_poly([-1, 0, 0])), 1.000000, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 4, 0).area(), 0.500154, places=6)
        self.assertAlmostEqual(fov_poly([-1, 0, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 4, 0).overlap(fov_poly([-1, 0, 0])), 0.000000, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 4, 0).overlap(fov_poly([-1, 0, 0])), 1.000000, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 4, 1).area(), 0.500154, places=6)
        self.assertAlmostEqual(fov_poly([-1, 0, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 4, 1).overlap(fov_poly([-1, 0, 0])), 0.433070, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 4, 1).overlap(fov_poly([-1, 0, 0])), 0.566930, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 4, 2).area(), 0.500154, places=6)
        self.assertAlmostEqual(fov_poly([-1, 0, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 4, 2).overlap(fov_poly([-1, 0, 0])), 0.433070, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 4, 2).overlap(fov_poly([-1, 0, 0])), 0.566930, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 4, 3).area(), 0.500154, places=6)
        self.assertAlmostEqual(fov_poly([-1, 0, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 4, 3).overlap(fov_poly([-1, 0, 0])), 0.000000, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 4, 3).overlap(fov_poly([-1, 0, 0])), 1.000000, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 5, 0).area(), 0.143348, places=6)
        self.assertAlmostEqual(fov_poly([-1, 0, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 5, 0).overlap(fov_poly([-1, 0, 0])), 0.000000, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 5, 0).overlap(fov_poly([-1, 0, 0])), 1.000000, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 5, 1).area(), 0.143348, places=6)
        self.assertAlmostEqual(fov_poly([-1, 0, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 5, 1).overlap(fov_poly([-1, 0, 0])), 0.000032, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 5, 1).overlap(fov_poly([-1, 0, 0])), 0.999968, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 5, 2).area(), 0.143348, places=6)
        self.assertAlmostEqual(fov_poly([-1, 0, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 5, 2).overlap(fov_poly([-1, 0, 0])), 0.000032, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 5, 2).overlap(fov_poly([-1, 0, 0])), 0.999968, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 5, 3).area(), 0.143348, places=6)
        self.assertAlmostEqual(fov_poly([-1, 0, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 5, 3).overlap(fov_poly([-1, 0, 0])), 0.000000, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 5, 3).overlap(fov_poly([-1, 0, 0])), 1.000000, places=6)
        # trace = [0, 1, 0]
        self.assertAlmostEqual(tile_poly(6, 4, 0, 0).area(), 0.143348, places=6)
        self.assertAlmostEqual(fov_poly([0, 1, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 0, 0).overlap(fov_poly([0, 1, 0])), 0.000032, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 0, 0).overlap(fov_poly([0, 1, 0])), 0.999968, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 0, 1).area(), 0.143348, places=6)
        self.assertAlmostEqual(fov_poly([0, 1, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 0, 1).overlap(fov_poly([0, 1, 0])), 0.000032, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 0, 1).overlap(fov_poly([0, 1, 0])), 0.999968, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 0, 2).area(), 0.143348, places=6)
        self.assertAlmostEqual(fov_poly([0, 1, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 0, 2).overlap(fov_poly([0, 1, 0])), 0.000000, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 0, 2).overlap(fov_poly([0, 1, 0])), 1.000000, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 0, 3).area(), 0.143348, places=6)
        self.assertAlmostEqual(fov_poly([0, 1, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 0, 3).overlap(fov_poly([0, 1, 0])), 0.000000, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 0, 3).overlap(fov_poly([0, 1, 0])), 1.000000, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 1, 0).area(), 0.500154, places=6)
        self.assertAlmostEqual(fov_poly([0, 1, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 1, 0).overlap(fov_poly([0, 1, 0])), 0.433070, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 1, 0).overlap(fov_poly([0, 1, 0])), 0.566930, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 1, 1).area(), 0.500154, places=6)
        self.assertAlmostEqual(fov_poly([0, 1, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 1, 1).overlap(fov_poly([0, 1, 0])), 0.433070, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 1, 1).overlap(fov_poly([0, 1, 0])), 0.566930, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 1, 2).area(), 0.500154, places=6)
        self.assertAlmostEqual(fov_poly([0, 1, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 1, 2).overlap(fov_poly([0, 1, 0])), 0.000000, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 1, 2).overlap(fov_poly([0, 1, 0])), 1.000000, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 1, 3).area(), 0.500154, places=6)
        self.assertAlmostEqual(fov_poly([0, 1, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 1, 3).overlap(fov_poly([0, 1, 0])), 0.000000, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 1, 3).overlap(fov_poly([0, 1, 0])), 1.000000, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 2, 0).area(), 0.927295, places=6)
        self.assertAlmostEqual(fov_poly([0, 1, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 2, 0).overlap(fov_poly([0, 1, 0])), 0.618675, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 2, 0).overlap(fov_poly([0, 1, 0])), 0.381325, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 2, 1).area(), 0.927295, places=6)
        self.assertAlmostEqual(fov_poly([0, 1, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 2, 1).overlap(fov_poly([0, 1, 0])), 0.618675, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 2, 1).overlap(fov_poly([0, 1, 0])), 0.381325, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 2, 2).area(), 0.927295, places=6)
        self.assertAlmostEqual(fov_poly([0, 1, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 2, 2).overlap(fov_poly([0, 1, 0])), 0.000000, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 2, 2).overlap(fov_poly([0, 1, 0])), 1.000000, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 2, 3).area(), 0.927295, places=6)
        self.assertAlmostEqual(fov_poly([0, 1, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 2, 3).overlap(fov_poly([0, 1, 0])), 0.000000, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 2, 3).overlap(fov_poly([0, 1, 0])), 1.000000, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 3, 0).area(), 0.927295, places=6)
        self.assertAlmostEqual(fov_poly([0, 1, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 3, 0).overlap(fov_poly([0, 1, 0])), 0.618675, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 3, 0).overlap(fov_poly([0, 1, 0])), 0.381325, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 3, 1).area(), 0.927295, places=6)
        self.assertAlmostEqual(fov_poly([0, 1, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 3, 1).overlap(fov_poly([0, 1, 0])), 0.618675, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 3, 1).overlap(fov_poly([0, 1, 0])), 0.381325, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 3, 2).area(), 0.927295, places=6)
        self.assertAlmostEqual(fov_poly([0, 1, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 3, 2).overlap(fov_poly([0, 1, 0])), 0.000000, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 3, 2).overlap(fov_poly([0, 1, 0])), 1.000000, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 3, 3).area(), 0.927295, places=6)
        self.assertAlmostEqual(fov_poly([0, 1, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 3, 3).overlap(fov_poly([0, 1, 0])), 0.000000, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 3, 3).overlap(fov_poly([0, 1, 0])), 1.000000, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 4, 0).area(), 0.500154, places=6)
        self.assertAlmostEqual(fov_poly([0, 1, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 4, 0).overlap(fov_poly([0, 1, 0])), 0.433070, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 4, 0).overlap(fov_poly([0, 1, 0])), 0.566930, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 4, 1).area(), 0.500154, places=6)
        self.assertAlmostEqual(fov_poly([0, 1, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 4, 1).overlap(fov_poly([0, 1, 0])), 0.433070, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 4, 1).overlap(fov_poly([0, 1, 0])), 0.566930, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 4, 2).area(), 0.500154, places=6)
        self.assertAlmostEqual(fov_poly([0, 1, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 4, 2).overlap(fov_poly([0, 1, 0])), 0.000000, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 4, 2).overlap(fov_poly([0, 1, 0])), 1.000000, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 4, 3).area(), 0.500154, places=6)
        self.assertAlmostEqual(fov_poly([0, 1, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 4, 3).overlap(fov_poly([0, 1, 0])), 0.000000, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 4, 3).overlap(fov_poly([0, 1, 0])), 1.000000, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 5, 0).area(), 0.143348, places=6)
        self.assertAlmostEqual(fov_poly([0, 1, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 5, 0).overlap(fov_poly([0, 1, 0])), 0.000032, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 5, 0).overlap(fov_poly([0, 1, 0])), 0.999968, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 5, 1).area(), 0.143348, places=6)
        self.assertAlmostEqual(fov_poly([0, 1, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 5, 1).overlap(fov_poly([0, 1, 0])), 0.000032, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 5, 1).overlap(fov_poly([0, 1, 0])), 0.999968, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 5, 2).area(), 0.143348, places=6)
        self.assertAlmostEqual(fov_poly([0, 1, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 5, 2).overlap(fov_poly([0, 1, 0])), 0.000000, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 5, 2).overlap(fov_poly([0, 1, 0])), 1.000000, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 5, 3).area(), 0.143348, places=6)
        self.assertAlmostEqual(fov_poly([0, 1, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 5, 3).overlap(fov_poly([0, 1, 0])), 0.000000, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 5, 3).overlap(fov_poly([0, 1, 0])), 1.000000, places=6)
        # trace = [0, -1, 0]
        self.assertAlmostEqual(tile_poly(6, 4, 0, 0).area(), 0.143348, places=6)
        self.assertAlmostEqual(fov_poly([0, -1, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 0, 0).overlap(fov_poly([0, -1, 0])), 0.000000, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 0, 0).overlap(fov_poly([0, -1, 0])), 1.000000, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 0, 1).area(), 0.143348, places=6)
        self.assertAlmostEqual(fov_poly([0, -1, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 0, 1).overlap(fov_poly([0, -1, 0])), 0.000000, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 0, 1).overlap(fov_poly([0, -1, 0])), 1.000000, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 0, 2).area(), 0.143348, places=6)
        self.assertAlmostEqual(fov_poly([0, -1, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 0, 2).overlap(fov_poly([0, -1, 0])), 0.000032, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 0, 2).overlap(fov_poly([0, -1, 0])), 0.999968, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 0, 3).area(), 0.143348, places=6)
        self.assertAlmostEqual(fov_poly([0, -1, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 0, 3).overlap(fov_poly([0, -1, 0])), 0.000032, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 0, 3).overlap(fov_poly([0, -1, 0])), 0.999968, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 1, 0).area(), 0.500154, places=6)
        self.assertAlmostEqual(fov_poly([0, -1, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 1, 0).overlap(fov_poly([0, -1, 0])), 0.000000, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 1, 0).overlap(fov_poly([0, -1, 0])), 1.000000, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 1, 1).area(), 0.500154, places=6)
        self.assertAlmostEqual(fov_poly([0, -1, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 1, 1).overlap(fov_poly([0, -1, 0])), 0.000000, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 1, 1).overlap(fov_poly([0, -1, 0])), 1.000000, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 1, 2).area(), 0.500154, places=6)
        self.assertAlmostEqual(fov_poly([0, -1, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 1, 2).overlap(fov_poly([0, -1, 0])), 0.433070, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 1, 2).overlap(fov_poly([0, -1, 0])), 0.566930, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 1, 3).area(), 0.500154, places=6)
        self.assertAlmostEqual(fov_poly([0, -1, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 1, 3).overlap(fov_poly([0, -1, 0])), 0.433070, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 1, 3).overlap(fov_poly([0, -1, 0])), 0.566930, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 2, 0).area(), 0.927295, places=6)
        self.assertAlmostEqual(fov_poly([0, -1, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 2, 0).overlap(fov_poly([0, -1, 0])), 0.000000, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 2, 0).overlap(fov_poly([0, -1, 0])), 1.000000, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 2, 1).area(), 0.927295, places=6)
        self.assertAlmostEqual(fov_poly([0, -1, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 2, 1).overlap(fov_poly([0, -1, 0])), 0.000000, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 2, 1).overlap(fov_poly([0, -1, 0])), 1.000000, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 2, 2).area(), 0.927295, places=6)
        self.assertAlmostEqual(fov_poly([0, -1, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 2, 2).overlap(fov_poly([0, -1, 0])), 0.618675, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 2, 2).overlap(fov_poly([0, -1, 0])), 0.381325, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 2, 3).area(), 0.927295, places=6)
        self.assertAlmostEqual(fov_poly([0, -1, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 2, 3).overlap(fov_poly([0, -1, 0])), 0.618675, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 2, 3).overlap(fov_poly([0, -1, 0])), 0.381325, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 3, 0).area(), 0.927295, places=6)
        self.assertAlmostEqual(fov_poly([0, -1, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 3, 0).overlap(fov_poly([0, -1, 0])), 0.000000, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 3, 0).overlap(fov_poly([0, -1, 0])), 1.000000, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 3, 1).area(), 0.927295, places=6)
        self.assertAlmostEqual(fov_poly([0, -1, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 3, 1).overlap(fov_poly([0, -1, 0])), 0.000000, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 3, 1).overlap(fov_poly([0, -1, 0])), 1.000000, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 3, 2).area(), 0.927295, places=6)
        self.assertAlmostEqual(fov_poly([0, -1, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 3, 2).overlap(fov_poly([0, -1, 0])), 0.618675, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 3, 2).overlap(fov_poly([0, -1, 0])), 0.381325, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 3, 3).area(), 0.927295, places=6)
        self.assertAlmostEqual(fov_poly([0, -1, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 3, 3).overlap(fov_poly([0, -1, 0])), 0.618675, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 3, 3).overlap(fov_poly([0, -1, 0])), 0.381325, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 4, 0).area(), 0.500154, places=6)
        self.assertAlmostEqual(fov_poly([0, -1, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 4, 0).overlap(fov_poly([0, -1, 0])), 0.000000, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 4, 0).overlap(fov_poly([0, -1, 0])), 1.000000, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 4, 1).area(), 0.500154, places=6)
        self.assertAlmostEqual(fov_poly([0, -1, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 4, 1).overlap(fov_poly([0, -1, 0])), 0.000000, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 4, 1).overlap(fov_poly([0, -1, 0])), 1.000000, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 4, 2).area(), 0.500154, places=6)
        self.assertAlmostEqual(fov_poly([0, -1, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 4, 2).overlap(fov_poly([0, -1, 0])), 0.433070, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 4, 2).overlap(fov_poly([0, -1, 0])), 0.566930, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 4, 3).area(), 0.500154, places=6)
        self.assertAlmostEqual(fov_poly([0, -1, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 4, 3).overlap(fov_poly([0, -1, 0])), 0.433070, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 4, 3).overlap(fov_poly([0, -1, 0])), 0.566930, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 5, 0).area(), 0.143348, places=6)
        self.assertAlmostEqual(fov_poly([0, -1, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 5, 0).overlap(fov_poly([0, -1, 0])), 0.000000, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 5, 0).overlap(fov_poly([0, -1, 0])), 1.000000, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 5, 1).area(), 0.143348, places=6)
        self.assertAlmostEqual(fov_poly([0, -1, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 5, 1).overlap(fov_poly([0, -1, 0])), 0.000000, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 5, 1).overlap(fov_poly([0, -1, 0])), 1.000000, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 5, 2).area(), 0.143348, places=6)
        self.assertAlmostEqual(fov_poly([0, -1, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 5, 2).overlap(fov_poly([0, -1, 0])), 0.000032, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 5, 2).overlap(fov_poly([0, -1, 0])), 0.999968, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 5, 3).area(), 0.143348, places=6)
        self.assertAlmostEqual(fov_poly([0, -1, 0]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 5, 3).overlap(fov_poly([0, -1, 0])), 0.000032, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 5, 3).overlap(fov_poly([0, -1, 0])), 0.999968, places=6)
        # trace = [0, 0, 1]
        self.assertAlmostEqual(tile_poly(6, 4, 0, 0).area(), 0.143348, places=6)
        self.assertAlmostEqual(fov_poly([0, 0, 1]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 0, 0).overlap(fov_poly([0, 0, 1])), 1.000000, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 0, 0).overlap(fov_poly([0, 0, 1])), 0.000000, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 0, 1).area(), 0.143348, places=6)
        self.assertAlmostEqual(fov_poly([0, 0, 1]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 0, 1).overlap(fov_poly([0, 0, 1])), 1.000000, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 0, 1).overlap(fov_poly([0, 0, 1])), 0.000000, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 0, 2).area(), 0.143348, places=6)
        self.assertAlmostEqual(fov_poly([0, 0, 1]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 0, 2).overlap(fov_poly([0, 0, 1])), 1.000000, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 0, 2).overlap(fov_poly([0, 0, 1])), 0.000000, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 0, 3).area(), 0.143348, places=6)
        self.assertAlmostEqual(fov_poly([0, 0, 1]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 0, 3).overlap(fov_poly([0, 0, 1])), 1.000000, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 0, 3).overlap(fov_poly([0, 0, 1])), 0.000000, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 1, 0).area(), 0.500154, places=6)
        self.assertAlmostEqual(fov_poly([0, 0, 1]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 1, 0).overlap(fov_poly([0, 0, 1])), 0.984897, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 1, 0).overlap(fov_poly([0, 0, 1])), 0.015103, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 1, 1).area(), 0.500154, places=6)
        self.assertAlmostEqual(fov_poly([0, 0, 1]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 1, 1).overlap(fov_poly([0, 0, 1])), 0.984897, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 1, 1).overlap(fov_poly([0, 0, 1])), 0.015103, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 1, 2).area(), 0.500154, places=6)
        self.assertAlmostEqual(fov_poly([0, 0, 1]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 1, 2).overlap(fov_poly([0, 0, 1])), 0.984897, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 1, 2).overlap(fov_poly([0, 0, 1])), 0.015103, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 1, 3).area(), 0.500154, places=6)
        self.assertAlmostEqual(fov_poly([0, 0, 1]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 1, 3).overlap(fov_poly([0, 0, 1])), 0.984897, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 1, 3).overlap(fov_poly([0, 0, 1])), 0.015103, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 2, 0).area(), 0.927295, places=6)
        self.assertAlmostEqual(fov_poly([0, 0, 1]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 2, 0).overlap(fov_poly([0, 0, 1])), 0.166455, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 2, 0).overlap(fov_poly([0, 0, 1])), 0.833545, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 2, 1).area(), 0.927295, places=6)
        self.assertAlmostEqual(fov_poly([0, 0, 1]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 2, 1).overlap(fov_poly([0, 0, 1])), 0.166455, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 2, 1).overlap(fov_poly([0, 0, 1])), 0.833545, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 2, 2).area(), 0.927295, places=6)
        self.assertAlmostEqual(fov_poly([0, 0, 1]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 2, 2).overlap(fov_poly([0, 0, 1])), 0.166455, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 2, 2).overlap(fov_poly([0, 0, 1])), 0.833545, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 2, 3).area(), 0.927295, places=6)
        self.assertAlmostEqual(fov_poly([0, 0, 1]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 2, 3).overlap(fov_poly([0, 0, 1])), 0.166455, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 2, 3).overlap(fov_poly([0, 0, 1])), 0.833545, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 3, 0).area(), 0.927295, places=6)
        self.assertAlmostEqual(fov_poly([0, 0, 1]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 3, 0).overlap(fov_poly([0, 0, 1])), 0.000000, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 3, 0).overlap(fov_poly([0, 0, 1])), 1.000000, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 3, 1).area(), 0.927295, places=6)
        self.assertAlmostEqual(fov_poly([0, 0, 1]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 3, 1).overlap(fov_poly([0, 0, 1])), 0.000000, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 3, 1).overlap(fov_poly([0, 0, 1])), 1.000000, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 3, 2).area(), 0.927295, places=6)
        self.assertAlmostEqual(fov_poly([0, 0, 1]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 3, 2).overlap(fov_poly([0, 0, 1])), 0.000000, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 3, 2).overlap(fov_poly([0, 0, 1])), 1.000000, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 3, 3).area(), 0.927295, places=6)
        self.assertAlmostEqual(fov_poly([0, 0, 1]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 3, 3).overlap(fov_poly([0, 0, 1])), 0.000000, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 3, 3).overlap(fov_poly([0, 0, 1])), 1.000000, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 4, 0).area(), 0.500154, places=6)
        self.assertAlmostEqual(fov_poly([0, 0, 1]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 4, 0).overlap(fov_poly([0, 0, 1])), 0.000000, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 4, 0).overlap(fov_poly([0, 0, 1])), 1.000000, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 4, 1).area(), 0.500154, places=6)
        self.assertAlmostEqual(fov_poly([0, 0, 1]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 4, 1).overlap(fov_poly([0, 0, 1])), 0.000000, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 4, 1).overlap(fov_poly([0, 0, 1])), 1.000000, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 4, 2).area(), 0.500154, places=6)
        self.assertAlmostEqual(fov_poly([0, 0, 1]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 4, 2).overlap(fov_poly([0, 0, 1])), 0.000000, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 4, 2).overlap(fov_poly([0, 0, 1])), 1.000000, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 4, 3).area(), 0.500154, places=6)
        self.assertAlmostEqual(fov_poly([0, 0, 1]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 4, 3).overlap(fov_poly([0, 0, 1])), 0.000000, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 4, 3).overlap(fov_poly([0, 0, 1])), 1.000000, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 5, 0).area(), 0.143348, places=6)
        self.assertAlmostEqual(fov_poly([0, 0, 1]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 5, 0).overlap(fov_poly([0, 0, 1])), 0.000000, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 5, 0).overlap(fov_poly([0, 0, 1])), 1.000000, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 5, 1).area(), 0.143348, places=6)
        self.assertAlmostEqual(fov_poly([0, 0, 1]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 5, 1).overlap(fov_poly([0, 0, 1])), 0.000000, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 5, 1).overlap(fov_poly([0, 0, 1])), 1.000000, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 5, 2).area(), 0.143348, places=6)
        self.assertAlmostEqual(fov_poly([0, 0, 1]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 5, 2).overlap(fov_poly([0, 0, 1])), 0.000000, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 5, 2).overlap(fov_poly([0, 0, 1])), 1.000000, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 5, 3).area(), 0.143348, places=6)
        self.assertAlmostEqual(fov_poly([0, 0, 1]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 5, 3).overlap(fov_poly([0, 0, 1])), 0.000000, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 5, 3).overlap(fov_poly([0, 0, 1])), 1.000000, places=6)
        # trace = [0, 0, -1]
        self.assertAlmostEqual(tile_poly(6, 4, 0, 0).area(), 0.143348, places=6)
        self.assertAlmostEqual(fov_poly([0, 0, -1]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 0, 0).overlap(fov_poly([0, 0, -1])), 0.000000, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 0, 0).overlap(fov_poly([0, 0, -1])), 1.000000, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 0, 1).area(), 0.143348, places=6)
        self.assertAlmostEqual(fov_poly([0, 0, -1]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 0, 1).overlap(fov_poly([0, 0, -1])), 0.000000, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 0, 1).overlap(fov_poly([0, 0, -1])), 1.000000, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 0, 2).area(), 0.143348, places=6)
        self.assertAlmostEqual(fov_poly([0, 0, -1]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 0, 2).overlap(fov_poly([0, 0, -1])), 0.000000, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 0, 2).overlap(fov_poly([0, 0, -1])), 1.000000, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 0, 3).area(), 0.143348, places=6)
        self.assertAlmostEqual(fov_poly([0, 0, -1]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 0, 3).overlap(fov_poly([0, 0, -1])), 0.000000, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 0, 3).overlap(fov_poly([0, 0, -1])), 1.000000, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 1, 0).area(), 0.500154, places=6)
        self.assertAlmostEqual(fov_poly([0, 0, -1]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 1, 0).overlap(fov_poly([0, 0, -1])), 0.000000, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 1, 0).overlap(fov_poly([0, 0, -1])), 1.000000, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 1, 1).area(), 0.500154, places=6)
        self.assertAlmostEqual(fov_poly([0, 0, -1]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 1, 1).overlap(fov_poly([0, 0, -1])), 0.000000, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 1, 1).overlap(fov_poly([0, 0, -1])), 1.000000, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 1, 2).area(), 0.500154, places=6)
        self.assertAlmostEqual(fov_poly([0, 0, -1]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 1, 2).overlap(fov_poly([0, 0, -1])), 0.000000, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 1, 2).overlap(fov_poly([0, 0, -1])), 1.000000, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 1, 3).area(), 0.500154, places=6)
        self.assertAlmostEqual(fov_poly([0, 0, -1]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 1, 3).overlap(fov_poly([0, 0, -1])), 0.000000, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 1, 3).overlap(fov_poly([0, 0, -1])), 1.000000, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 2, 0).area(), 0.927295, places=6)
        self.assertAlmostEqual(fov_poly([0, 0, -1]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 2, 0).overlap(fov_poly([0, 0, -1])), 0.000000, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 2, 0).overlap(fov_poly([0, 0, -1])), 1.000000, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 2, 1).area(), 0.927295, places=6)
        self.assertAlmostEqual(fov_poly([0, 0, -1]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 2, 1).overlap(fov_poly([0, 0, -1])), 0.000000, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 2, 1).overlap(fov_poly([0, 0, -1])), 1.000000, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 2, 2).area(), 0.927295, places=6)
        self.assertAlmostEqual(fov_poly([0, 0, -1]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 2, 2).overlap(fov_poly([0, 0, -1])), 0.000000, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 2, 2).overlap(fov_poly([0, 0, -1])), 1.000000, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 2, 3).area(), 0.927295, places=6)
        self.assertAlmostEqual(fov_poly([0, 0, -1]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 2, 3).overlap(fov_poly([0, 0, -1])), 0.000000, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 2, 3).overlap(fov_poly([0, 0, -1])), 1.000000, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 3, 0).area(), 0.927295, places=6)
        self.assertAlmostEqual(fov_poly([0, 0, -1]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 3, 0).overlap(fov_poly([0, 0, -1])), 0.166455, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 3, 0).overlap(fov_poly([0, 0, -1])), 0.833545, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 3, 1).area(), 0.927295, places=6)
        self.assertAlmostEqual(fov_poly([0, 0, -1]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 3, 1).overlap(fov_poly([0, 0, -1])), 0.166455, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 3, 1).overlap(fov_poly([0, 0, -1])), 0.833545, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 3, 2).area(), 0.927295, places=6)
        self.assertAlmostEqual(fov_poly([0, 0, -1]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 3, 2).overlap(fov_poly([0, 0, -1])), 0.166455, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 3, 2).overlap(fov_poly([0, 0, -1])), 0.833545, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 3, 3).area(), 0.927295, places=6)
        self.assertAlmostEqual(fov_poly([0, 0, -1]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 3, 3).overlap(fov_poly([0, 0, -1])), 0.166455, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 3, 3).overlap(fov_poly([0, 0, -1])), 0.833545, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 4, 0).area(), 0.500154, places=6)
        self.assertAlmostEqual(fov_poly([0, 0, -1]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 4, 0).overlap(fov_poly([0, 0, -1])), 0.984897, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 4, 0).overlap(fov_poly([0, 0, -1])), 0.015103, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 4, 1).area(), 0.500154, places=6)
        self.assertAlmostEqual(fov_poly([0, 0, -1]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 4, 1).overlap(fov_poly([0, 0, -1])), 0.984897, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 4, 1).overlap(fov_poly([0, 0, -1])), 0.015103, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 4, 2).area(), 0.500154, places=6)
        self.assertAlmostEqual(fov_poly([0, 0, -1]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 4, 2).overlap(fov_poly([0, 0, -1])), 0.984897, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 4, 2).overlap(fov_poly([0, 0, -1])), 0.015103, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 4, 3).area(), 0.500154, places=6)
        self.assertAlmostEqual(fov_poly([0, 0, -1]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 4, 3).overlap(fov_poly([0, 0, -1])), 0.984897, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 4, 3).overlap(fov_poly([0, 0, -1])), 0.015103, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 5, 0).area(), 0.143348, places=6)
        self.assertAlmostEqual(fov_poly([0, 0, -1]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 5, 0).overlap(fov_poly([0, 0, -1])), 1.000000, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 5, 0).overlap(fov_poly([0, 0, -1])), 0.000000, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 5, 1).area(), 0.143348, places=6)
        self.assertAlmostEqual(fov_poly([0, 0, -1]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 5, 1).overlap(fov_poly([0, 0, -1])), 1.000000, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 5, 1).overlap(fov_poly([0, 0, -1])), 0.000000, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 5, 2).area(), 0.143348, places=6)
        self.assertAlmostEqual(fov_poly([0, 0, -1]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 5, 2).overlap(fov_poly([0, 0, -1])), 1.000000, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 5, 2).overlap(fov_poly([0, 0, -1])), 0.000000, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 5, 3).area(), 0.143348, places=6)
        self.assertAlmostEqual(fov_poly([0, 0, -1]).area(), 3.161202, places=6)
        self.assertAlmostEqual(tile_poly(6, 4, 5, 3).overlap(fov_poly([0, 0, -1])), 1.000000, places=6)
        self.assertAlmostEqual(1 - tile_poly(6, 4, 5, 3).overlap(fov_poly([0, 0, -1])), 0.000000, places=6)
